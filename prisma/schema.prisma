// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  userId    Int       @id @default(autoincrement()) @map("userId")  // @map 이 db 의 칼럼 이름이 된다.
  nickname  String    @unique @map("nickname")
  password  String    @map("password")
  confirm   String    @map("confirm")
  aboutlike String?   @map("aboutlike")

  createdAt DateTime  @default(now()) @map("CreatedAt")
  updatedAt DateTime  @updatedAt @map("UpdatedAt")

  Posts     Posts[] // Posts 테이블과 1:n 관계임을 나타냄.
  Comments  Comments[]
  @@map("Users")
}


model Posts {
  postId    Int       @id @default(autoincrement()) @map("postId") 
  UserId    Int       @map("UserId")     // Users 테이블에서 UserId 칼럼을 참조, 참조할 땐 키 값 첫번째 철자를 대문자로 표시 , 한명의 사용자가 여러 게시글이 가능해야 하므로 unique 삭제
  title     String    @map("title")
  content   String    @db.Text @map("content")  // "@db.Text" 텍스트 데이터 타입 사용하기 위한 코드
  likes     Int?      @map("likes")

  createdAt DateTime  @default(now()) @map("CreatedAt")
  updatedAt DateTime  @updatedAt @map("UpdatedAt")

  User      Users     @relation(fields: [UserId], references: [userId], onDelete: Cascade)  // fields[해당 테이블의 칼럼명], references[참고할 테이블의 칼럼명] onDelete 참고 테이블에서 자료가 삭제되면 참고하는 데이터들 같이 삭제.
  Comments  Comments[]
  @@map("Posts")
}


model Comments {
  commentId Int     @id @default(autoincrement()) @map("commentId") 
  content   String  @db.Text @map("content")
  UserId    Int     @map("UserId")
  PostId    Int     @map("PostId")    

  createdAt DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  User  Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Post  Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)

  @@map("Comments")
}